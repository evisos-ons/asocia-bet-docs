{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"AsociaBet API Documentation","text":"<p>Welcome to the AsociaBet API - your gateway to accessing Twitter and YouTube data for your applications. Our API provides a simple, reliable, and secure way to integrate social media data into your products.</p>"},{"location":"#quick-integration-guide","title":"Quick Integration Guide","text":"<ol> <li>API Overview - Learn the basics of our API</li> <li>Get API Keys - Obtain and use your API keys</li> <li>Explore Endpoints - Discover available data endpoints</li> </ol>"},{"location":"#api-features","title":"API Features","text":"<ul> <li>Social Media Data: Access Twitter user details, followers, and tweets. Retrieve YouTube channel information and shorts.</li> <li>Simple Authentication: Easy-to-implement API key system with support for both server-side and client-side applications.</li> <li>JSON Responses: Clean, consistent JSON responses for seamless integration.</li> <li>Reliable Rate Limiting: Credit-based system to ensure fair usage and availability.</li> <li>Comprehensive Documentation: Clear examples and guides for quick implementation.</li> </ul>"},{"location":"#integration-examples","title":"Integration Examples","text":"<p>Integrate our API into your application with just a few lines of code:</p> <pre><code>// Example: Fetch Twitter user details\nconst fetchUserDetails = async (username) =&gt; {\n  const response = await fetch(`https://dev-api.asocia.bet/api/twitter/${username}/details`, {\n    headers: {\n      'X-API-Key': 'your-api-key'\n    }\n  });\n  return response.json();\n};\n</code></pre>"},{"location":"#support","title":"Support","text":"<p>Need help with integration?</p> <ul> <li>Review our API Reference</li> <li>Check out Integration Best Practices</li> <li>Contact our integration support at api-support@asociabet.com</li> </ul>"},{"location":"#get-started","title":"Get Started","text":"<p>Ready to add social media data to your application?</p> <ol> <li>Create an Account</li> <li>Get Your API Keys</li> <li>Start Building</li> </ol>"},{"location":"api/authentication/","title":"Authentication","text":"<p>The AsociaBet API uses API keys to authenticate requests. This guide explains how to obtain and implement API keys in your applications.</p>"},{"location":"api/authentication/#getting-your-api-keys","title":"Getting Your API Keys","text":"<ol> <li>Create an account: Sign up at dev.asocia.bet/signup with you gmail account</li> <li>Visit the Dashboard: Navigate to the 'Projects' page in the left hand sidebar</li> <li> <p>Create a Project: Click 'New Project' and give it a name (description optional) </p> </li> <li> <p>Generate Keys: Click Settings &gt; API Keys &gt; Create New Key</p> </li> <li>Create Key: Name the key and choose what type of key (private is recommended)</li> <li>Set Allowed Origins: For public keys, specify the domains that the project's keys are allowed from</li> </ol>"},{"location":"api/authentication/#api-key-types","title":"API Key Types","text":""},{"location":"api/authentication/#private-keys-sk_","title":"Private Keys (<code>sk_*</code>)","text":"<p>Use private keys for server-side applications. These provide full access but must be kept secure.</p> <pre><code>// Node.js example with private key\nconst axios = require('axios');\n\nconst getTwitterUser = async (username) =&gt; {\n  try {\n    const response = await axios.get(`https://dev-api.asocia.bet/api/twitter/${username}/details`, {\n      headers: {\n        'X-API-Key': 'sk_your_private_key'\n      }\n    });\n    return response.data;\n  } catch (error) {\n    console.error('API request failed:', error.response.data);\n    return error.response.data;\n  }\n};\n</code></pre>"},{"location":"api/authentication/#public-keys-pk_","title":"Public Keys (<code>pk_*</code>)","text":"<p>Use public keys for client-side applications. These require origin validation and have limited permissions.</p> <pre><code>// Browser example with public key\nconst getTwitterUser = async (username) =&gt; {\n  try {\n    const response = await fetch(`https://dev-api.asocia.bet/api/twitter/${username}/details`, {\n      headers: {\n        'X-API-Key': 'pk_your_public_key'\n      }\n    });\n    return response.json();\n  } catch (error) {\n    console.error('API request failed:', error);\n    return { error: 'Failed to fetch data' };\n  }\n};\n</code></pre>"},{"location":"api/authentication/#origin-validation-public-keys","title":"Origin Validation (Public Keys)","text":"<p>When using public keys in browsers, we automatically validate:</p> <ol> <li>The <code>Origin</code> header - Must match an allowed domain in your API key settings</li> <li>The <code>Referer</code> header - Must be consistent with the Origin</li> </ol>"},{"location":"api/authentication/#common-origin-validation-errors","title":"Common Origin Validation Errors","text":"<pre><code>{\n    \"error\": \"Origin header is required for public API keys\"\n}\n</code></pre> <pre><code>{\n    \"error\": \"Origin not allowed for this API key\"\n}\n</code></pre>"},{"location":"api/authentication/#securing-your-api-keys","title":"Securing Your API Keys","text":"<p>Follow these best practices to protect your API keys:</p> <ol> <li>Never expose private keys: Keep private keys on your server, never in client-side code</li> <li>Environment variables: Store keys in environment variables, not in code</li> <li>Restrict origins: Limit allowed domains for public keys</li> <li>Monitor usage: Check your dashboard regularly for unusual activity</li> <li>Rotate keys: Generate new keys periodically and phase out old ones</li> </ol>"},{"location":"api/authentication/#using-api-keys-with-popular-frameworks","title":"Using API Keys With Popular Frameworks","text":""},{"location":"api/authentication/#react","title":"React","text":"<pre><code>// API service in React\nimport axios from 'axios';\n\nconst apiService = axios.create({\n  baseURL: 'https://dev-api.asocia.bet/api',\n  headers: {\n    'X-API-Key': process.env.REACT_APP_ASOCIABET_API_KEY\n  }\n});\n\nexport const getTwitterUserDetails = (username) =&gt; {\n  return apiService.get(`/twitter/${username}/details`);\n};\n</code></pre>"},{"location":"api/authentication/#python","title":"Python","text":"<pre><code># Python example\nimport requests\n\ndef get_twitter_user(username):\n    headers = {\n        'X-API-Key': 'sk_your_private_key'\n    }\n    response = requests.get(\n        f'https://dev-api.asocia.bet/api/twitter/{username}/details',\n        headers=headers\n    )\n    return response.json()\n</code></pre>"},{"location":"api/authentication/#next-steps","title":"Next Steps","text":"<ul> <li>Explore API Endpoints</li> <li>Integration Guide</li> <li>Client Libraries</li> </ul>"},{"location":"api/overview/","title":"API Overview","text":"<p>The AsociaBet API allows you to integrate social media data from Twitter and YouTube into your applications. This documentation provides everything you need to implement our API quickly and efficiently.</p>"},{"location":"api/overview/#base-url","title":"Base URL","text":"<p>All API requests should be made to the following base URL:</p> <pre><code>https://dev-api.asocia.bet/api\n</code></pre>"},{"location":"api/overview/#request-format","title":"Request Format","text":"<p>All requests should include:</p> <ul> <li>Your API key in the <code>X-API-Key</code> header</li> <li>For public keys, origin validation headers (<code>Origin</code> and <code>Referer</code>)</li> <li>Content-Type: <code>application/json</code> for POST requests</li> </ul>"},{"location":"api/overview/#authentication","title":"Authentication","text":"<p>AsociaBet API uses API keys for authentication. We offer two types of keys:</p> <ol> <li>Private Keys (<code>sk_*</code>) - For server-side applications</li> <li>Public Keys (<code>pk_*</code>) - For client-side applications (with origin validation)</li> </ol> <p>Learn more about authentication \u2192</p>"},{"location":"api/overview/#credit-system","title":"Credit System","text":"<p>Our API uses a credit-based system for access control:</p> <ul> <li>Each request consumes 1 credit from your account</li> <li>Monitor your usage in your AsociaBet dashboard</li> <li>Purchase additional credits as needed for your application</li> </ul>"},{"location":"api/overview/#response-format","title":"Response Format","text":"<p>All API responses are in JSON format with a consistent structure:</p> <p>Success Response</p> <pre><code>{\n    \"username\": \"example_user\",\n    \"details\": {\n        // Data payload\n    }\n}\n</code></pre> <p>Error Response</p> <pre><code>{\n    \"error\": \"Error message\"\n}\n</code></pre>"},{"location":"api/overview/#status-codes","title":"Status Codes","text":"<p>The API uses standard HTTP status codes:</p> <ul> <li><code>200</code> - Success</li> <li><code>401</code> - Unauthorized (invalid API key)</li> <li><code>402</code> - Payment Required (insufficient credits)</li> <li><code>404</code> - Not Found</li> <li><code>500</code> - Server Error</li> </ul>"},{"location":"api/overview/#available-endpoints","title":"Available Endpoints","text":""},{"location":"api/overview/#twitter-data","title":"Twitter Data","text":"<p>Access Twitter user information and content:</p> <ul> <li>User Details - Profile information</li> <li>User Followers - Follower data</li> <li>User Tweets - User's tweet history</li> <li>Single Tweet - Specific tweet details</li> </ul>"},{"location":"api/overview/#youtube-data","title":"YouTube Data","text":"<p>Access YouTube channel information and content:</p> <ul> <li>Channel Details - Channel information</li> <li>Channel Shorts - Shorts video data</li> <li>Single Short - Specific short details</li> </ul>"},{"location":"api/endpoints/twitter/","title":"Twitter API Endpoints","text":"<p>The Twitter API endpoints allow you to access Twitter user data for integration into your applications. Here you'll find all available endpoints, request parameters, and response formats.</p>"},{"location":"api/endpoints/twitter/#base-url","title":"Base URL","text":"<p>All Twitter API endpoints use the following base URL:</p> <pre><code>https://dev-api.asocia.bet/api/twitter\n</code></pre>"},{"location":"api/endpoints/twitter/#available-endpoints","title":"Available Endpoints","text":""},{"location":"api/endpoints/twitter/#get-user-details","title":"Get User Details","text":"<p>Retrieve detailed information about a Twitter user.</p> <pre><code>GET /{username}/details\n</code></pre> <p>Parameters</p> Parameter Type Required Description username string Yes Twitter username without @ symbol <p>Code Example</p> <pre><code>// JavaScript example\nconst getUserDetails = async (username) =&gt; {\n  try {\n    const response = await fetch(`https://dev-api.asocia.bet/api/twitter/${username}/details`, {\n      headers: {\n        'X-API-Key': 'your_api_key'\n      }\n    });\n    return response.json();\n  } catch (error) {\n    console.error('Error fetching Twitter user details:', error);\n  }\n};\n</code></pre> <p>Response</p> <pre><code>{\n  \"username\": \"elonmusk\",\n  \"displayName\": \"Elon Musk\",\n  \"followers_count\": 158900000,\n  \"following_count\": 1500,\n  \"tweet_count\": 25000,\n  \"profile_image_url\": \"https://pbs.twimg.com/profile_images/123456789/elon_400x400.jpg\",\n  \"description\": \"Technoking of Tesla, CEO of SpaceX\",\n  \"created_at\": \"2009-06-02T20:12:29.000Z\",\n  \"verified\": true\n}\n</code></pre>"},{"location":"api/endpoints/twitter/#get-user-tweets","title":"Get User Tweets","text":"<p>Retrieve the latest tweets for a Twitter user.</p> <pre><code>GET /{username}/tweets\n</code></pre> <p>Parameters</p> Parameter Type Required Description username string Yes Twitter username without @ symbol <p>Code Example</p> <pre><code>// JavaScript example\nconst getUserTweets = async (username) =&gt; {\n  try {\n    const response = await fetch(`https://dev-api.asocia.bet/api/twitter/${username}/tweets`, {\n      headers: {\n        'X-API-Key': 'your_api_key'\n      }\n    });\n    return response.json();\n  } catch (error) {\n    console.error('Error fetching tweets:', error);\n  }\n};\n</code></pre> <p>Response</p> <pre><code>{\n  \"tweets\": {\n    \"1449099963531608064\": {\n      \"created_at\": \"2021-10-15T19:48:48.000Z\",\n      \"metrics\": [\n        {\n          \"likes\": 78,\n          \"replies\": 6,\n          \"retweets\": 10,\n          \"timestamp\": \"2025-04-23T17:01:08.390353\",\n          \"views\": 0\n        }\n      ],\n      \"text\": \"@aeger08 @BabyApesNFT WAWAWA!! \\nmissed mint, sniped perfect two! https://t.co/jD3FaToVzz\",\n      \"timestamp\": \"2021-10-15T19:48:48.000Z\",\n      \"url\": \"https://x.com/chanchaneeNFT/status/1449099963531608064\"\n    },\n    \"1513470800132972544\": {\n      \"created_at\": \"2022-04-11T10:55:32.000Z\",\n      \"metrics\": [\n        {\n          \"likes\": 50,\n          \"replies\": 1,\n          \"retweets\": 8,\n          \"timestamp\": \"2025-04-23T17:01:08.390769\",\n          \"views\": 0\n        }\n      ],\n      \"text\": \"@TheMarketComeUp @CetsOnCreck @DegenDojoNFT lfg! https://t.co/P9gxWtPGkl\",\n      \"timestamp\": \"2022-04-11T10:55:32.000Z\",\n      \"url\": \"https://x.com/chanchaneeNFT/status/1513470800132972544\"\n    }\n  }\n}\n</code></pre>"},{"location":"api/endpoints/twitter/#get-user-followers","title":"Get User Followers","text":"<p>Retrieve the follower count and follower growth metrics for a Twitter user.</p> <pre><code>GET /{username}/followers\n</code></pre> <p>Parameters</p> Parameter Type Required Description username string Yes Twitter username without @ symbol <p>Code Example</p> <pre><code>// JavaScript example\nconst getUserFollowers = async (username) =&gt; {\n  try {\n    const response = await fetch(`https://dev-api.asocia.bet/api/twitter/${username}/followers`, {\n      headers: {\n        'X-API-Key': 'your_api_key'\n      }\n    });\n    return response.json();\n  } catch (error) {\n    console.error('Error fetching followers:', error);\n  }\n};\n</code></pre> <p>Response</p> <pre><code>{\n  \"username\": \"elonmusk\",\n  \"current_followers\": 158900000,\n  \"history\": [\n    {\n      \"date\": \"2024-03-01\",\n      \"followers\": 158800000,\n      \"change\": 100000\n    },\n    {\n      \"date\": \"2024-02-29\",\n      \"followers\": 158700000,\n      \"change\": 50000\n    }\n  ]\n}\n</code></pre>"},{"location":"api/endpoints/twitter/#get-tweet-details","title":"Get Tweet Details","text":"<p>Retrieve detailed metrics for a specific tweet.</p> <pre><code>GET /{username}/tweet/{tweet_id}\n</code></pre> <p>Parameters</p> Parameter Type Required Description username string Yes Twitter username without @ symbol tweet_id string Yes Unique identifier of the tweet <p>Code Example</p> <pre><code>// JavaScript example\nconst getTweetDetails = async (username, tweetId) =&gt; {\n  try {\n    const response = await fetch(`https://dev-api.asocia.bet/api/twitter/${username}/tweet/${tweetId}`, {\n      headers: {\n        'X-API-Key': 'your_api_key'\n      }\n    });\n    return response.json();\n  } catch (error) {\n    console.error('Error fetching tweet details:', error);\n  }\n};\n</code></pre> <p>Response</p> <pre><code>{\n  \"id\": \"1234567890\",\n  \"text\": \"To the moon! \ud83d\ude80\",\n  \"created_at\": \"2024-03-01T12:00:00.000Z\",\n  \"metrics\": {\n    \"impressions\": 1500000,\n    \"likes\": 50000,\n    \"retweets\": 10000,\n    \"replies\": 5000,\n    \"quotes\": 2000\n  },\n  \"history\": [\n    {\n      \"timestamp\": \"2024-03-01T13:00:00.000Z\",\n      \"impressions\": 1000000,\n      \"likes\": 30000,\n      \"retweets\": 8000\n    }\n  ]\n}\n</code></pre>"},{"location":"api/endpoints/twitter/#error-handling","title":"Error Handling","text":""},{"location":"api/endpoints/twitter/#user-not-found-error","title":"User Not Found Error","text":"<pre><code>{\n    \"error\": \"User username not found\"\n}\n</code></pre>"},{"location":"api/endpoints/twitter/#tweet-not-found-error","title":"Tweet Not Found Error","text":"<pre><code>{\n    \"error\": \"Tweet tweet_id not found for user username\"\n}\n</code></pre>"},{"location":"api/endpoints/twitter/#credits-rate-limiting","title":"Credits &amp; Rate Limiting","text":"<p>Each Twitter API request costs 1 credit. Ensure your account has sufficient credits before making requests.</p>"},{"location":"api/endpoints/twitter/#next-steps","title":"Next Steps","text":"<ul> <li>YouTube API Endpoints</li> <li>Authentication Guide</li> <li>Integration Examples</li> </ul>"},{"location":"api/endpoints/youtube/","title":"YouTube API Endpoints","text":"<p>The YouTube API endpoints allow you to access YouTube channel and shorts data for integration into your applications. Here you'll find all available endpoints, request parameters, and response formats.</p>"},{"location":"api/endpoints/youtube/#base-url","title":"Base URL","text":"<p>All YouTube API endpoints use the following base URL:</p> <pre><code>https://dev-api.asocia.bet/api/youtube\n</code></pre>"},{"location":"api/endpoints/youtube/#available-endpoints","title":"Available Endpoints","text":""},{"location":"api/endpoints/youtube/#get-available-channels","title":"Get Available Channels","text":"<p>Retrieve a list of all available YouTube channels.</p> <pre><code>GET /channels\n</code></pre> <p>Code Example</p> <pre><code>// JavaScript example\nfetch('https://dev-api.asocia.bet/api/youtube/channels', {\n  headers: {\n    'X-API-Key': 'your_api_key'\n  }\n})\n.then(response =&gt; response.json())\n.then(data =&gt; console.log(data));\n</code></pre> <p>Response</p> <pre><code>{\n  \"channels\": [\n    {\n      \"id\": \"UC-lHJZR3Gqxm24_Vd_AJ5Yw\",\n      \"username\": \"PewDiePie\",\n      \"displayName\": \"PewDiePie\",\n      \"subscribers\": 111000000,\n      \"videoCount\": 4500,\n      \"thumbnail\": \"https://yt3.ggpht.com/...\",\n    },\n    {\n      \"id\": \"UCX6OQ3DkcsbYNE6H8uQQuVA\",\n      \"username\": \"MrBeast\",\n      \"displayName\": \"MrBeast\",\n      \"subscribers\": 158000000,\n      \"videoCount\": 750,\n      \"thumbnail\": \"https://yt3.ggpht.com/...\",\n    }\n  ]\n}\n</code></pre>"},{"location":"api/endpoints/youtube/#get-channel-details","title":"Get Channel Details","text":"<p>Retrieve detailed information about a YouTube channel.</p> <pre><code>GET /{channel}/details\n</code></pre> <p>Parameters</p> Parameter Type Required Description channel string Yes YouTube channel username or ID <p>Code Example</p> <pre><code>// JavaScript example\nconst getChannelDetails = async (channel) =&gt; {\n  try {\n    const response = await fetch(`https://dev-api.asocia.bet/api/youtube/${channel}/details`, {\n      headers: {\n        'X-API-Key': 'your_api_key'\n      }\n    });\n    return response.json();\n  } catch (error) {\n    console.error('Error fetching channel details:', error);\n  }\n};\n</code></pre> <p>Response</p> <pre><code>{\n  \"id\": \"UCX6OQ3DkcsbYNE6H8uQQuVA\",\n  \"username\": \"MrBeast\",\n  \"displayName\": \"MrBeast\",\n  \"description\": \"Gaming, vlogs, and more!\",\n  \"subscribers\": 158000000,\n  \"videoCount\": 750,\n  \"viewCount\": 25000000000,\n  \"joinedAt\": \"2012-02-19T20:05:05Z\",\n  \"country\": \"US\",\n  \"thumbnail\": \"https://yt3.ggpht.com/...\",\n  \"bannerImage\": \"https://yt3.ggpht.com/...\",\n  \"statistics\": {\n    \"dailySubscriberGain\": 50000,\n    \"weeklySubscriberGain\": 350000,\n    \"monthlySubscriberGain\": 1500000\n  }\n}\n</code></pre>"},{"location":"api/endpoints/youtube/#get-channel-shorts","title":"Get Channel Shorts","text":"<p>Retrieve a list of shorts from a YouTube channel.</p> <pre><code>GET /{channel}/shorts\n</code></pre> <p>Parameters</p> Parameter Type Required Description channel string Yes YouTube channel username or ID limit number No Maximum number of shorts to return (default: 20, max: 100) before string No Return shorts published before this date (ISO 8601 format) <p>Code Example</p> <pre><code>// JavaScript example\nconst getChannelShorts = async (channel) =&gt; {\n  try {\n    const response = await fetch(`https://dev-api.asocia.bet/api/youtube/${channel}/shorts`, {\n      headers: {\n        'X-API-Key': 'your_api_key'\n      }\n    });\n    return response.json();\n  } catch (error) {\n    console.error('Error fetching channel shorts:', error);\n  }\n};\n</code></pre> <p>Response</p> <pre><code>{\n  \"channel\": \"MrBeast\",\n  \"shorts\": [\n    {\n      \"id\": \"abc123xyz\",\n      \"title\": \"I Gave Away 100 Cars!\",\n      \"thumbnail\": \"https://i.ytimg.com/vi/...\",\n      \"publishedAt\": \"2024-03-01T15:00:00Z\",\n      \"views\": 50000000,\n      \"likes\": 2500000,\n      \"comments\": 100000\n    }\n  ],\n  \"pagination\": {\n    \"hasMore\": true,\n    \"nextCursor\": \"eyJwYWdlIjoy...\"\n  }\n}\n</code></pre>"},{"location":"api/endpoints/youtube/#get-short-details","title":"Get Short Details","text":"<p>Retrieve detailed metrics for a specific YouTube short.</p> <pre><code>GET /{channel}/short/{short_id}\n</code></pre> <p>Parameters</p> Parameter Type Required Description channel string Yes YouTube channel username or ID short_id string Yes Unique identifier of the short <p>Code Example</p> <pre><code>// JavaScript example\nconst getShortDetails = async (channel, shortId) =&gt; {\n  try {\n    const response = await fetch(`https://dev-api.asocia.bet/api/youtube/${channel}/short/${shortId}`, {\n      headers: {\n        'X-API-Key': 'your_api_key'\n      }\n    });\n    return response.json();\n  } catch (error) {\n    console.error('Error fetching short details:', error);\n  }\n};\n</code></pre> <p>Response</p> <pre><code>{\n  \"id\": \"abc123xyz\",\n  \"title\": \"I Gave Away 100 Cars!\",\n  \"description\": \"Watch till the end to see who won!\",\n  \"publishedAt\": \"2024-03-01T15:00:00Z\",\n  \"metrics\": {\n    \"views\": 50000000,\n    \"likes\": 2500000,\n    \"comments\": 100000,\n    \"shares\": 75000\n  },\n  \"history\": [\n    {\n      \"timestamp\": \"2024-03-01T16:00:00Z\",\n      \"views\": 1000000,\n      \"likes\": 50000,\n      \"comments\": 2000\n    }\n  ]\n}\n</code></pre>"},{"location":"api/endpoints/youtube/#error-handling","title":"Error Handling","text":""},{"location":"api/endpoints/youtube/#channel-not-found-error","title":"Channel Not Found Error","text":"<pre><code>{\n    \"error\": \"Channel channel not found\"\n}\n</code></pre>"},{"location":"api/endpoints/youtube/#short-not-found-error","title":"Short Not Found Error","text":"<pre><code>{\n    \"error\": \"Short short_id not found for channel channel\"\n}\n</code></pre>"},{"location":"api/endpoints/youtube/#credits-rate-limiting","title":"Credits &amp; Rate Limiting","text":"<p>Each YouTube API request costs 1 credit. Ensure your account has sufficient credits before making requests.</p>"},{"location":"api/endpoints/youtube/#next-steps","title":"Next Steps","text":"<ul> <li>Twitter API Endpoints</li> <li>Authentication Guide</li> <li>Integration Examples</li> </ul>"},{"location":"integration/best-practices/","title":"API Integration Best Practices","text":"<p>Follow these best practices to ensure optimal performance, security, and reliability when integrating with the AsociaBet API.</p>"},{"location":"integration/best-practices/#security","title":"Security","text":""},{"location":"integration/best-practices/#api-key-management","title":"API Key Management","text":"<ul> <li>Never expose private keys: Keep private keys (<code>sk_*</code>) on your server-side code only</li> <li>Environment variables: Store API keys in environment variables, not in source code</li> <li>Key rotation: Implement a process to periodically rotate API keys</li> <li>Separate development/production keys: Use different API keys for different environments</li> </ul> <pre><code>// GOOD - Using environment variables\nconst apiKey = process.env.ASOCIABET_API_KEY;\n\n// BAD - Hardcoded keys\nconst apiKey = \"sk_1234567890abcdef\"; // Never do this!\n</code></pre>"},{"location":"integration/best-practices/#public-key-usage","title":"Public Key Usage","text":"<p>When using public keys (<code>pk_*</code>) in client-side applications:</p> <ul> <li>Restrict domains: Limit allowed origins to only the domains you own</li> <li>Request validation: Add additional validation on your server for requests from clients</li> <li>Content Security Policy: Implement a CSP to prevent unauthorized API calls</li> </ul>"},{"location":"integration/best-practices/#performance","title":"Performance","text":""},{"location":"integration/best-practices/#caching","title":"Caching","text":"<p>Implement appropriate caching strategies to reduce API calls:</p> <pre><code>// Example caching implementation\nclass CachedApiClient {\n  constructor(apiKey, cacheTtl = 300000) { // 5 minutes default TTL\n    this.apiKey = apiKey;\n    this.cacheTtl = cacheTtl;\n    this.cache = new Map();\n  }\n\n  async request(endpoint) {\n    const cacheKey = endpoint;\n\n    // Check cache first\n    if (this.cache.has(cacheKey)) {\n      const cachedData = this.cache.get(cacheKey);\n      if (Date.now() &lt; cachedData.expiry) {\n        return cachedData.data;\n      }\n    }\n\n    // Make API request if not cached or expired\n    const response = await fetch(`https://dev-api.asocia.bet/api${endpoint}`, {\n      headers: {\n        'X-API-Key': this.apiKey\n      }\n    });\n\n    const data = await response.json();\n\n    // Store in cache\n    this.cache.set(cacheKey, {\n      data,\n      expiry: Date.now() + this.cacheTtl\n    });\n\n    return data;\n  }\n}\n</code></pre>"},{"location":"integration/best-practices/#batching-requests","title":"Batching Requests","text":"<p>Whenever possible, batch related requests:</p> <ul> <li>Load user details and tweets in a single batch operation</li> <li>Implement client-side request queuing</li> <li>Schedule non-critical updates for off-peak times</li> </ul>"},{"location":"integration/best-practices/#pagination","title":"Pagination","text":"<p>For endpoints that return large datasets:</p> <ul> <li>Implement proper pagination in your application</li> <li>Only fetch the data you need</li> <li>Load additional data on demand</li> </ul>"},{"location":"integration/best-practices/#reliability","title":"Reliability","text":""},{"location":"integration/best-practices/#error-handling","title":"Error Handling","text":"<p>Implement robust error handling for all API requests:</p> <pre><code>async function fetchWithRetry(url, options, maxRetries = 3) {\n  let retries = 0;\n\n  while (retries &lt; maxRetries) {\n    try {\n      const response = await fetch(url, options);\n\n      if (response.status === 429) {\n        // Rate limited, wait before retrying\n        const retryAfter = response.headers.get('Retry-After') || 5;\n        await new Promise(resolve =&gt; setTimeout(resolve, retryAfter * 1000));\n        retries++;\n        continue;\n      }\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error || `HTTP error ${response.status}`);\n      }\n\n      return await response.json();\n    } catch (error) {\n      if (retries &gt;= maxRetries - 1) {\n        throw error;\n      }\n\n      // Exponential backoff\n      const backoff = Math.pow(2, retries) * 1000;\n      await new Promise(resolve =&gt; setTimeout(resolve, backoff));\n      retries++;\n    }\n  }\n}\n</code></pre>"},{"location":"integration/best-practices/#rate-limit-handling","title":"Rate Limit Handling","text":"<p>Be prepared to handle rate limits:</p> <ul> <li>Respect the <code>Retry-After</code> header</li> <li>Implement exponential backoff</li> <li>Monitor credit usage to avoid unexpected rate limiting</li> </ul>"},{"location":"integration/best-practices/#monitoring-debugging","title":"Monitoring &amp; Debugging","text":""},{"location":"integration/best-practices/#logging","title":"Logging","text":"<p>Implement comprehensive logging for API interactions:</p> <pre><code>async function loggedApiRequest(endpoint, apiKey) {\n  const startTime = Date.now();\n\n  try {\n    const response = await fetch(`https://dev-api.asocia.bet/api${endpoint}`, {\n      headers: {\n        'X-API-Key': apiKey\n      }\n    });\n\n    const data = await response.json();\n\n    // Log successful request\n    console.log({\n      endpoint,\n      status: response.status,\n      duration: Date.now() - startTime,\n      timestamp: new Date().toISOString()\n    });\n\n    return data;\n  } catch (error) {\n    // Log error\n    console.error({\n      endpoint,\n      error: error.message,\n      duration: Date.now() - startTime,\n      timestamp: new Date().toISOString()\n    });\n\n    throw error;\n  }\n}\n</code></pre>"},{"location":"integration/best-practices/#performance-monitoring","title":"Performance Monitoring","text":"<p>Monitor API performance metrics:</p> <ul> <li>Response times</li> <li>Error rates</li> <li>Credit usage</li> <li>Cache hit/miss ratios</li> </ul>"},{"location":"integration/best-practices/#user-experience","title":"User Experience","text":""},{"location":"integration/best-practices/#loading-states","title":"Loading States","text":"<p>Always implement loading states in your UI:</p> <pre><code>function TwitterProfile({ username }) {\n  const [profile, setProfile] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() =&gt; {\n    async function loadProfile() {\n      setLoading(true);\n      try {\n        const data = await api.getTwitterUserDetails(username);\n        setProfile(data);\n        setError(null);\n      } catch (err) {\n        setError(err.message);\n      } finally {\n        setLoading(false);\n      }\n    }\n\n    loadProfile();\n  }, [username]);\n\n  if (loading) return &lt;LoadingSpinner /&gt;;\n  if (error) return &lt;ErrorMessage message={error} /&gt;;\n\n  return (\n    &lt;div className=\"profile\"&gt;\n      &lt;h2&gt;{profile.details.name}&lt;/h2&gt;\n      &lt;p&gt;{profile.details.bio}&lt;/p&gt;\n      {/* Other profile details */}\n    &lt;/div&gt;\n  );\n}\n</code></pre>"},{"location":"integration/best-practices/#graceful-degradation","title":"Graceful Degradation","text":"<p>Implement fallback content for when API requests fail:</p> <ul> <li>Show cached data when available</li> <li>Display friendly error messages</li> <li>Provide retry options for failed requests</li> </ul>"},{"location":"integration/best-practices/#next-steps","title":"Next Steps","text":"<ul> <li>Getting Started Guide</li> <li>Client Libraries</li> <li>API Reference</li> </ul>"},{"location":"integration/getting-started/","title":"Getting Started with the AsociaBet API","text":"<p>This guide will help you quickly integrate the AsociaBet API into your application to access Twitter and YouTube data.</p>"},{"location":"integration/getting-started/#step-1a-create-an-account","title":"Step 1a: Create an Account","text":"<p>Before you can use the API, you'll need to:</p> <ol> <li>Visit dev.asocia.bet/signup</li> <li>Login with your Gmail account</li> </ol>"},{"location":"integration/getting-started/#step-1b-purchase-credits","title":"Step 1b: Purchase credits","text":"<p>For the time being, contact the admin for test credits.</p>"},{"location":"integration/getting-started/#step-2-generate-your-api-keys","title":"Step 2: Generate Your API Keys","text":"<p>From your dashboard:</p> <ol> <li>Navigate to \"API Keys\" section</li> <li>Click \"Generate New API Key\"</li> <li>Choose the key type:</li> <li>Private Key (<code>sk_*</code>) - For server-side applications</li> <li>Public Key (<code>pk_*</code>) - For client-side applications</li> <li>For public keys, add your application's domains to the allowed origins list</li> <li>Store your API key securely</li> </ol>"},{"location":"integration/getting-started/#step-3-make-your-first-api-request","title":"Step 3: Make Your First API Request","text":"<p>Let's verify everything works by making a simple request to list available Twitter creators:</p>"},{"location":"integration/getting-started/#using-javascript","title":"Using JavaScript","text":"<pre><code>// Check if your API key works\nconst checkApiAccess = async () =&gt; {\n  try {\n    const response = await fetch('https://dev-api.asocia.bet/api/twitter/creators', {\n      headers: {\n        'X-API-Key': 'your_api_key'\n      }\n    });\n\n    const data = await response.json();\n    console.log('Available creators:', data.creators);\n    return data;\n  } catch (error) {\n    console.error('API request failed:', error);\n  }\n};\n\ncheckApiAccess();\n</code></pre>"},{"location":"integration/getting-started/#using-python","title":"Using Python","text":"<pre><code>import requests\n\ndef check_api_access():\n    headers = {\n        'X-API-Key': 'your_api_key'\n    }\n\n    response = requests.get(\n        'https://dev-api.asocia.bet/api/twitter/creators',\n        headers=headers\n    )\n\n    if response.status_code == 200:\n        print('Available creators:', response.json()['creators'])\n        return response.json()\n    else:\n        print('Error:', response.json().get('error', 'Unknown error'))\n        return None\n\ncheck_api_access()\n</code></pre>"},{"location":"integration/getting-started/#step-4-integrate-into-your-application","title":"Step 4: Integrate into Your Application","text":"<p>Now that you've confirmed your API key works, it's time to integrate the API into your application.</p>"},{"location":"integration/getting-started/#create-an-api-service","title":"Create an API Service","text":"<p>Build a reusable service to handle API requests:</p> <pre><code>// apiService.js\nclass AsociaBetApi {\n  constructor(apiKey, baseUrl = 'https://dev-api.asocia.bet/api') {\n    this.apiKey = apiKey;\n    this.baseUrl = baseUrl;\n  }\n\n  async request(endpoint, options = {}) {\n    const url = `${this.baseUrl}${endpoint}`;\n\n    const headers = {\n      'X-API-Key': this.apiKey,\n      ...options.headers\n    };\n\n    try {\n      const response = await fetch(url, {\n        ...options,\n        headers\n      });\n\n      const data = await response.json();\n\n      if (!response.ok) {\n        throw new Error(data.error || 'API request failed');\n      }\n\n      return data;\n    } catch (error) {\n      console.error(`Error fetching ${endpoint}:`, error);\n      throw error;\n    }\n  }\n\n  // Twitter endpoints\n  getTwitterCreators() {\n    return this.request('/twitter/creators');\n  }\n\n  getTwitterUserDetails(username) {\n    return this.request(`/twitter/${username}/details`);\n  }\n\n  getUserTweets(username) {\n    return this.request(`/twitter/${username}/tweets`);\n  }\n\n  // YouTube endpoints\n  getYoutubeChannels() {\n    return this.request('/youtube/channels');\n  }\n\n  getChannelDetails(channel) {\n    return this.request(`/youtube/${channel}/details`);\n  }\n\n  getChannelShorts(channel) {\n    return this.request(`/youtube/${channel}/shorts`);\n  }\n}\n\n// Usage\nconst api = new AsociaBetApi('your_api_key');\napi.getTwitterUserDetails('elonmusk')\n  .then(data =&gt; console.log(data))\n  .catch(error =&gt; console.error(error));\n</code></pre>"},{"location":"integration/getting-started/#step-5-implement-error-handling","title":"Step 5: Implement Error Handling","text":"<p>Always implement proper error handling for API requests:</p> <pre><code>async function fetchTwitterData(username) {\n  try {\n    const response = await api.getTwitterUserDetails(username);\n    updateUI(response);\n  } catch (error) {\n    if (error.message.includes('not found')) {\n      showNotFoundError();\n    } else if (error.message.includes('insufficient credits')) {\n      showCreditsPurchasePrompt();\n    } else if (error.message.includes('invalid API key')) {\n      showInvalidKeyError();\n    } else {\n      showGenericError();\n    }\n  }\n}\n</code></pre>"},{"location":"integration/getting-started/#step-6-monitor-usage","title":"Step 6: Monitor Usage","text":"<p>Keep track of your API usage:</p> <ol> <li>Check your dashboard regularly for credit usage</li> <li>Set up alerts for low credit balance</li> <li>Monitor response times and errors</li> </ol>"},{"location":"integration/getting-started/#next-steps","title":"Next Steps","text":"<ul> <li>Explore Twitter API Endpoints</li> <li>Explore YouTube API Endpoints</li> <li>Check out Client Libraries for easier integration</li> <li>Review Integration Best Practices</li> </ul>"}]}